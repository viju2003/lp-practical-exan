8. Write a program to simulate CPU Scheduling Algorithms: FCFS, Priority (Non-Preemptive). 
Process        AT                  BT
P1             10                   2
P2             0                    10
P3             8                    4
P4             5                    5

1. @@@@@@@ [FCFS]

import java.util.Scanner;

public class FCFS {
    public static void swap(int[] a, int s1, int s2) {
        int temp = a[s1];
        a[s1] = a[s2];
        a[s2] = temp;
    }
        public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter no of process: ");
        int n = sc.nextInt();
        int pid[] = new int[n];
        int at[] = new int[n];
        int bt[] = new int[n];
        int ct[] = new int[n];
        int ta[] = new int[n];
        int wt[] = new int[n];
        float avgwt = 0, avgta = 0;

        for (int i = 0; i < n; i++) {
            System.out.println("Enter PID " + (i + 1) + "'s Arival Time: ");
            at[i] = sc.nextInt();
            System.out.println("Enter PID " + (i + 1) + "'s Burst Time: ");
            bt[i] = sc.nextInt();
            pid[i] = i + 1;
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - (i + 1); j++) {
                if (at[j] > at[j + 1]) {
                    swap(at, j, j + 1);
                    swap(bt, j, j + 1);
                    swap(pid, j, j + 1);
                }
            }
        }

        for (int i = 0; i < n; i++) {
            if (i == 0) {
                ct[i] = at[i] + bt[i];
            } else {
                if (at[i] > ct[i - 1]) {
                    ct[i] = at[i] + bt[i];
                } else
                    ct[i] = ct[i - 1] + bt[i];
            }
            ta[i] = ct[i] - at[i];
            wt[i] = ta[i] - bt[i];
            avgwt += wt[i];
            avgta += ta[i];
        }
        System.out.println("\nPID\tAT\tBT\tCT\tTAT\tWT");
        for (int i = 0; i < n; i++) {
            System.out.println(pid[i] + "  \t " + at[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + ta[i] + "\t" + wt[i]);
        }
        sc.close();
        System.out.println("\nAverage TAT = " + (avgwt / n));
        System.out.println("Average WT = " + (avgta / n));
    }
}


2. @@@@@@@@@@@   Priority (Non-Preemptive)

import java.util.Scanner;

public class Priority {
    public static void swap(int[] a, int s1, int s2) {
        int temp = a[s1];
        a[s1] = a[s2];
        a[s2] = temp;
    }

    public static void main(String args[]) {
        try (Scanner sc = new Scanner(System.in)) {
            System.out.println("Enter no of process : ");
            int n = sc.nextInt();
            int pid[] = new int[n];
            int at[] = new int[n];
            int bt[] = new int[n];
            int prio[] = new int[n];
            int ct[] = new int[n];
            int tat[] = new int[n];
            int wt[] = new int[n];
            int f[] = new int[n];
            int i, st = 0, tot = 0;
            float avg_wt = 0, avg_tat = 0;

            for (i = 0; i < n; i++) {
                pid[i] = i + 1;
                System.out.println("Enter arrival time of process " + (i + 1) + ":");
                at[i] = sc.nextInt();
                System.out.println("Enter burst time of process " + (i + 1) + ":");
                bt[i] = sc.nextInt();
                System.out.println("Enter priority of process " + (i + 1) + ":");
                prio[i] = sc.nextInt();
            }

            for (i = 0; i < n; i++) {
                for (int j = 0; j < n - (i + 1); j++) {
                    if (at[j] > at[j + 1]) {
                        swap(at, j, j + 1);
                        swap(bt, j, j + 1);
                        swap(pid, j, j + 1);
                        swap(prio, j, j + 1);
                    }
                }
            }

            while (true) {
                int min = 99, c = n;
                if (tot == n)
                    break;

                for (i = 0; i < n; i++) {
                    if ((at[i] <= st) && (f[i] == 0) && (bt[i] < min)) {
                        min = bt[i];
                        c = i;
                    }
                }

                if (c == n)
                    st++;
                else {
                    ct[c] = st + bt[c];
                    st = st + bt[c];
                    f[c] = 1;
                    tot++;
                }

                for (i = 0; i < n; i++) {
                    for (int j = 0; j < n - (i + 1); j++) {
                        if (st >= at[j] && st >= at[j + 1]) {
                            if (prio[j] > prio[j + 1]) {
                                swap(at, j, j + 1);
                                swap(bt, j, j + 1);
                                swap(pid, j, j + 1);
                                swap(prio, j, j + 1);
                            }
                        }
                    }
                }
            }

            for (i = 0; i < n; i++) {
                if (i == 0)
                    ct[i] = at[i] + bt[i];
                else {
                    if (at[i] > ct[i - 1]) {
                        ct[i] = at[i] + bt[i];
                        f[i] = 1;
                    } else {
                        ct[i] = ct[i - 1] + bt[i];
                        f[i] = 1;
                    }
                }
                tat[i] = ct[i] - at[i];
                wt[i] = tat[i] - bt[i];
                avg_wt += wt[i];
                avg_tat += tat[i];
            }

            System.out.println("Pid\tAT\tBT\tPRIO\tCT\tTAT\tWT\n");
            for (i = 0; i < n; i++) {
                System.out.println(pid[i] + "\t" + at[i] + "\t" + bt[i] + "\t" + prio[i] + "\t" + ct[i] + "\t" + tat[i] + "\t" + wt[i]);
            }
            sc.close();
            System.out.print("\n Average Wait Time : " + avg_wt);
            System.out.print("\n Average Turn Around Time : " + avg_tat);
        }
    }
}
