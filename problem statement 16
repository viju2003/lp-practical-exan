16. Implement Pass-II of two pass assembler for pseudo-machine in Java using object oriented features. The output of assignment-1 (intermediate file and symbol table) 
should be input for this assignment.

1. Pass.java
package Assembler;

import java.io.*;
import java.util.*;
public class Pass2
{
    static Obj[] symb_table = new Obj[10];
    static Obj[] literal_table = new Obj[10];
    static int symb_found = 0;

    public static void main(String[] args) throws IOException 
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Total no. of Symbols: ");
        int total_symb =sc.nextInt();
        int pos, num;
        for (int i = 0; i < total_symb; i++) 
        {
            symb_table[i] = new Obj("", 0);
            System.out.println("Enter Symbol name: ");
            symb_table[i].name = sc.next();
            System.out.println("Enter Symbol Address: ");
            symb_table[i].addr = sc.nextInt();
        }
        System.out.println("Enter Total no. of Literals: ");
        int total_ltr = sc.nextInt();
        for (int i = 0; i < total_ltr; i++) 
        {
            literal_table[i] = new Obj("", 0);
            System.out.println("Enter Literal Name: ");
            literal_table[i].name = sc.next();
            
            
            System.out.println("Enter Literal Address: ");
            literal_table[i].addr = sc.nextInt();
        }
        System.out.println("\n******Symbol Table**********");
        System.out.println("\nSymbol\tAddress");
        for (int i = 0; i < total_symb; i++)
            System.out.println(symb_table[i].name + "\t" + symb_table[i].addr);
        System.out.println("\n*****Literal Table*****");
        System.out.println("\nIndex\tLiteral\tAddress");
        for (int i = 0; i < total_ltr; i++)
            System.out.println((i + 1) + "\t" + literal_table[i].name + "\t" + literal_table[i].addr);
        BufferedReader br=new BufferedReader(new FileReader("C:\\Users\\Samiksha\\eclipse-workspace\\Assembler\\src\\Assembler\\input.txt"));
        String line;
        boolean symbol_error = false, undef_mnemonic = false;
        System.out.println("\n*****Output File*****\n\n");
        lab:
        while ((line = br.readLine()) != null) 
        {
            String[] token_list = line.split("\\s+", 5);
            symbol_error = undef_mnemonic = false;
            lab1: for (String token : token_list)
            {
                if (token.length() > 0)
                {
                    pos = -1;
                    if(token.matches("---")) 
                    {
                        System.out.print("\t---");
                        undef_mnemonic = true;
                        }
                    else if(token.matches("[0-9]+"))
                        System.out.print("\n\n" +token);
                    else
                    {
                        String letters = token.replaceAll("[^A-Za-z]+", "");
                        num = Integer.parseInt(token.replaceAll("[^0-9]+", ""));

                        if (token.matches("\\([0-9]+\\)"))
                            System.out.println("\t" + num);
                        else {
                            switch (letters.toUpperCase()) 
                            {
                                case "S": if (symb_table[num - 1].addr == 0)
                                {
                                        System.out.print("\t");
                                        symbol_error = true;
                                }
                                else
                                    System.out.println("\t" + symb_table[num - 1].addr);
                                break;
                            case "L": System.out.print("\t" + literal_table[num - 1].addr);
                                break;
                            case "AD": System.out.print("\t");
                                continue lab;
                            case "DL":
                                switch (num) {

                                    case 1:
                                        System.out.print("\t");
                                        continue lab;
                                    case 2:
                                        System.out.print("\t 00 \t 00");
                                }
                                continue lab1;

                            case "C": System.out.print("\t" + num);
                                break;
                            default: System.out.print("\t" + "00" + num);

                        }
                    }
                }
            }
        }
        if (symbol_error)
            System.out.print("\n\n*****Symbol is not Defined*****");
        if (undef_mnemonic)
            System.out.println("\n\n*****Invalid Mnemonic*****");
    }

    int[] flag = new int[total_symb];
        for(
    int i = 0;
    i<total_symb;i++)

    {
        symb_found = 0;
        for (int j = 0; j < total_symb; j++)
            if (symb_table[i].name.equalsIgnoreCase(symb_table[j].name) && flag[j] == 0) 
            {
                symb_found++;
                
                flag[i] = flag[j] = 1;
            }
        if (symb_found > 1)
        {
            System.out.print(" \n  *****'+"+ symb_table[i].name + "' Is Duplicate Symbol*****");
        }
        br.close();
        sc.close();
    }
}
}
    
2.Obj.java
package Assembler;
public class Obj {
String name;
int addr;
Obj(String nm, int address)
{
this.name=nm;
this.addr=address;
}
}


3.Pooltable.java
package Assembler;
public class Pooltable {
int first,total_literals;
public Pooltable(int f, int l) {
this.first=f;
this.total_literals=l;
}
}

4. input.txt
(AD,1) (C,100)
100 (IS,5) (RG,1) (C,05)
101 (IS,5) (RG,2) (C,10)
102 (S,1) (IS,2) (RG,1) (RG,2)
103 (IS,6) (S,2) (L,1)
104 (IS,4) (RG,1) (S,1)
105 (AD,3) (C,102)
102 (DL,1) (C,5)
103 (IS,6) (S,3) (L,2)
104 (IS,6) (S,4) (L,3)
105 (DL,1) (C,8)
106 (DL,1) (C,8)
107 (IS,6) (S,2) (L,4)
108 (IS,6) (S,3) (L,5)
109 (DL,1) (C,02)
110 (DL,2) (C,10)
111 (DL,1) (C,09)
112 (S,5) (AD,4) (S,1)
113 (AD,2)
(DL,1) (C,7)
114 (DL,1) (C,8)
